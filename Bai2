using System;
using System.Collections.Generic;
using System.Linq;

namespace EmployeeCustomerManagement
{
    abstract class Person
    {
        public string Name { get; set; }

        protected Person(string name)
        {
            Name = name ?? throw new ArgumentNullException(nameof(name));
        }

        public abstract void Display();
    }

    class Employee : Person
    {
        public int WorkingHours { get; set; }
        public double PaymentPerHour { get; set; }

        public Employee(string name, int workingHours, double paymentPerHour)
            : base(name)
        {
            WorkingHours = workingHours;
            PaymentPerHour = paymentPerHour;
        }

        public double CalculateSalary()
        {
            return WorkingHours * PaymentPerHour;
        }

        public override void Display()
        {
            Console.WriteLine($"Employee Name: {Name}, Working Hours: {WorkingHours}, Payment Per Hour: {PaymentPerHour}, Salary: {CalculateSalary()}");
        }
    }

    class Customer : Person
    {
        public double Balance { get; set; }

        public Customer(string name, double balance)
            : base(name)
        {
            Balance = balance;
        }

        public override void Display()
        {
            Console.WriteLine($"Customer Name: {Name}, Balance: {Balance}");
        }
    }

    class Program
    {
        static void Main()
        {
            List<Employee> employees = new List<Employee>();
            List<Customer> customers = new List<Customer>();

            while (true)
            {
                Console.WriteLine("\nMenu:");
                Console.WriteLine("1. Add Employee");
                Console.WriteLine("2. Add Customer");
                Console.WriteLine("3. Show Employees");
                Console.WriteLine("4. Show Customers");
                Console.WriteLine("5. Find Highest Salary Employee");
                Console.WriteLine("6. Find Customer with Smallest Balance");
                Console.WriteLine("7. Find Employee by Name");
                Console.WriteLine("8. Exit");
                Console.Write("Choose an option: ");
                string? choiceInput = Console.ReadLine();
                if (int.TryParse(choiceInput, out int choice))
                {
                    switch (choice)
                    {
                        case 1:
                            AddEmployee(employees);
                            break;
                        case 2:
                            AddCustomer(customers);
                            break;
                        case 3:
                            ShowEmployees(employees);
                            break;
                        case 4:
                            ShowCustomers(customers);
                            break;
                        case 5:
                            FindHighestSalaryEmployee(employees);
                            break;
                        case 6:
                            FindCustomerWithSmallestBalance(customers);
                            break;
                        case 7:
                            FindEmployeeByName(employees);
                            break;
                        case 8:
                            return;
                        default:
                            Console.WriteLine("Invalid option!");
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter a number.");
                }
            }
        }

        static void AddEmployee(List<Employee> employees)
        {
            try
            {
                Console.Write("Enter name: ");
                string? name = Console.ReadLine();

                if (string.IsNullOrEmpty(name))
                {
                    Console.WriteLine("Name cannot be empty.");
                    return;
                }

                Console.Write("Enter working hours: ");
                string? workingHoursInput = Console.ReadLine();
                if (!int.TryParse(workingHoursInput, out int workingHours))
                {
                    Console.WriteLine("Invalid working hours. Please enter a valid number.");
                    return;
                }

                Console.Write("Enter payment per hour: ");
                string? paymentPerHourInput = Console.ReadLine();
                if (!double.TryParse(paymentPerHourInput, out double paymentPerHour))
                {
                    Console.WriteLine("Invalid payment per hour. Please enter a valid number.");
                    return;
                }

                employees.Add(new Employee(name, workingHours, paymentPerHour));
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }

        static void AddCustomer(List<Customer> customers)
        {
            try
            {
                Console.Write("Enter name: ");
                string? name = Console.ReadLine();

                if (string.IsNullOrEmpty(name))
                {
                    Console.WriteLine("Name cannot be empty.");
                    return;
                }

                Console.Write("Enter balance: ");
                string? balanceInput = Console.ReadLine();
                if (!double.TryParse(balanceInput, out double balance))
                {
                    Console.WriteLine("Invalid balance. Please enter a valid number.");
                    return;
                }

                customers.Add(new Customer(name, balance));
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }

        static void ShowEmployees(List<Employee> employees)
        {
            if (employees.Count == 0)
            {
                Console.WriteLine("No employees found.");
            }
            else
            {
                foreach (var employee in employees)
                {
                    employee.Display();
                }
            }
        }

        static void ShowCustomers(List<Customer> customers)
        {
            if (customers.Count == 0)
            {
                Console.WriteLine("No customers found.");
            }
            else
            {
                foreach (var customer in customers)
                {
                    customer.Display();
                }
            }
        }

        static void FindHighestSalaryEmployee(List<Employee> employees)
        {
            if (employees.Count == 0)
            {
                Console.WriteLine("No employees found.");
            }
            else
            {
                var highestSalaryEmployee = employees.OrderByDescending(e => e.CalculateSalary()).FirstOrDefault();
                if (highestSalaryEmployee != null)
                {
                    Console.WriteLine("Highest Salary Employee:");
                    highestSalaryEmployee.Display();
                }
            }
        }

        static void FindCustomerWithSmallestBalance(List<Customer> customers)
        {
            if (customers.Count == 0)
            {
                Console.WriteLine("No customers found.");
            }
            else
            {
                var customerWithSmallestBalance = customers.OrderBy(c => c.Balance).FirstOrDefault();
                if (customerWithSmallestBalance != null)
                {
                    Console.WriteLine("Customer with Smallest Balance:");
                    customerWithSmallestBalance.Display();
                }
            }
        }

        static void FindEmployeeByName(List<Employee> employees)
        {
            Console.Write("Enter name: ");
            string? name = Console.ReadLine();
            if (!string.IsNullOrEmpty(name))
            {
                var foundEmployee = employees.FirstOrDefault(e => e.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
                if (foundEmployee != null)
                {
                    Console.WriteLine("Employee found:");
                    foundEmployee.Display();
                }
                else
                {
                    Console.WriteLine("No employee found with that name.");
                }
            }
            else
            {
                Console.WriteLine("Name cannot be empty.");
            }
        }
    }
}
