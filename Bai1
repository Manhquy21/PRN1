using System;
using System.Collections.Generic;
using System.Linq;

namespace EmployeeManagement
{
    public interface IEmployee
    {
        double CalculateSalary();
    }

    public abstract class Employee : IEmployee
    {
        public string Name { get; private set; }
        public int WorkingHours { get; private set; }
        public double PaymentPerHour { get; private set; }

        public Employee(string name, int workingHours, double paymentPerHour)
        {
            Name = name ?? throw new ArgumentNullException(nameof(name));
            WorkingHours = workingHours;
            PaymentPerHour = paymentPerHour;
        }

        public abstract double CalculateSalary();

        public override string ToString()
        {
            return $"Name: {Name}, Working Hours: {WorkingHours}, Payment Per Hour: {PaymentPerHour}";
        }
    }

    public class FullTimeEmployee : Employee
    {
        public FullTimeEmployee(string name, int workingHours, double paymentPerHour)
            : base(name, workingHours, paymentPerHour) { }

        public override double CalculateSalary()
        {
            return 8 * PaymentPerHour;
        }

        public override string ToString()
        {
            return base.ToString() + $", Salary: {CalculateSalary()}";
        }
    }

    public class PartTimeEmployee : Employee
    {
        public PartTimeEmployee(string name, int workingHours, double paymentPerHour)
            : base(name, workingHours, paymentPerHour) { }

        public override double CalculateSalary()
        {
            return WorkingHours * PaymentPerHour;
        }

        public override string ToString()
        {
            return base.ToString() + $", Salary: {CalculateSalary()}";
        }
    }

    class Program
    {
        static void Main()
        {
            List<Employee> employees = new List<Employee>();

            while (true)
            {
                Console.WriteLine("\nMenu:");
                Console.WriteLine("1. Add Employee");
                Console.WriteLine("2. Show Employees");
                Console.WriteLine("3. Find Highest Salary Employee");
                Console.WriteLine("4. Find Employee by Name");
                Console.WriteLine("5. Exit");
                Console.Write("Choose an option: ");
                string? choiceInput = Console.ReadLine();
                if (int.TryParse(choiceInput, out int choice))
                {
                    switch (choice)
                    {
                        case 1:
                            AddEmployee(employees);
                            break;
                        case 2:
                            ShowEmployees(employees);
                            break;
                        case 3:
                            FindHighestSalaryEmployee(employees);
                            break;
                        case 4:
                            FindEmployeeByName(employees);
                            break;
                        case 5:
                            return;
                        default:
                            Console.WriteLine("Invalid option!");
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter a number.");
                }
            }
        }

        static void AddEmployee(List<Employee> employees)
        {
            try
            {
                Console.Write("Enter name: ");
                string? name = Console.ReadLine();

                if (string.IsNullOrEmpty(name))
                {
                    Console.WriteLine("Name cannot be empty.");
                    return;
                }

                Console.Write("Enter working hours: ");
                string? workingHoursInput = Console.ReadLine();
                if (!int.TryParse(workingHoursInput, out int workingHours))
                {
                    Console.WriteLine("Invalid working hours. Please enter a valid number.");
                    return;
                }

                Console.Write("Enter payment per hour: ");
                string? paymentPerHourInput = Console.ReadLine();
                if (!double.TryParse(paymentPerHourInput, out double paymentPerHour))
                {
                    Console.WriteLine("Invalid payment per hour. Please enter a valid number.");
                    return;
                }

                Console.Write("Is the employee full-time? (yes/no): ");
                string? isFullTime = Console.ReadLine()?.ToLower();

                if (isFullTime == "yes")
                {
                    employees.Add(new FullTimeEmployee(name, workingHours, paymentPerHour));
                }
                else
                {
                    employees.Add(new PartTimeEmployee(name, workingHours, paymentPerHour));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }

        static void ShowEmployees(List<Employee> employees)
        {
            if (employees.Count == 0)
            {
                Console.WriteLine("No employees found.");
            }
            else
            {
                foreach (var employee in employees)
                {
                    Console.WriteLine(employee);
                }
            }
        }

        static void FindHighestSalaryEmployee(List<Employee> employees)
        {
            if (employees.Count == 0)
            {
                Console.WriteLine("No employees found.");
            }
            else
            {
                var highestSalaryEmployee = employees.OrderByDescending(e => e.CalculateSalary()).FirstOrDefault();
                if (highestSalaryEmployee != null)
                {
                    Console.WriteLine("Highest Salary Employee: " + highestSalaryEmployee);
                }
            }
        }

        static void FindEmployeeByName(List<Employee> employees)
        {
            Console.Write("Enter name: ");
            string? name = Console.ReadLine();
            if (!string.IsNullOrEmpty(name))
            {
                var foundEmployee = employees.FirstOrDefault(e => e.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
                if (foundEmployee != null)
                {
                    Console.WriteLine("Employee found: " + foundEmployee);
                }
                else
                {
                    Console.WriteLine("No employee found with that name.");
                }
            }
            else
            {
                Console.WriteLine("Name cannot be empty.");
            }
        }
    }
}
